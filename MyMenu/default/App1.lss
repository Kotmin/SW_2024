
App1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  00000988  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000105  008000dc  008000dc  00000a98  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001e7  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ee3  00000000  00000000  00000cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000550  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b55  00000000  00000000  00002132  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00002c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  00002e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c1  00000000  00000000  00003182  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003843  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000054 <kolumny>:
  54:	10 20 40 80                                         . @.

00000058 <tab>:
  58:	01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10     ................
	...

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	e8 e8       	ldi	r30, 0x88	; 136
  7e:	f9 e0       	ldi	r31, 0x09	; 9
  80:	02 c0       	rjmp	.+4      	; 0x86 <.do_copy_data_start>

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	ac 3d       	cpi	r26, 0xDC	; 220
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <.do_copy_data_loop>

0000008c <__do_clear_bss>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	ac ed       	ldi	r26, 0xDC	; 220
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a1 3e       	cpi	r26, 0xE1	; 225
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
  9c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  a0:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <setDDR>:
#include "lcd_lib.h"
#include <string.h>

// Helper function to set the DDR register for the specified port
void setDDR(LCD *lcd, char port) {
  a8:	fc 01       	movw	r30, r24
    switch (port) {
  aa:	62 34       	cpi	r22, 0x42	; 66
  ac:	89 f0       	breq	.+34     	; 0xd0 <setDDR+0x28>
  ae:	63 34       	cpi	r22, 0x43	; 67
  b0:	18 f4       	brcc	.+6      	; 0xb8 <setDDR+0x10>
  b2:	61 34       	cpi	r22, 0x41	; 65
  b4:	19 f5       	brne	.+70     	; 0xfc <setDDR+0x54>
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <setDDR+0x1a>
  b8:	63 34       	cpi	r22, 0x43	; 67
  ba:	89 f0       	breq	.+34     	; 0xde <setDDR+0x36>
  bc:	64 34       	cpi	r22, 0x44	; 68
  be:	f1 f4       	brne	.+60     	; 0xfc <setDDR+0x54>
  c0:	15 c0       	rjmp	.+42     	; 0xec <setDDR+0x44>
        case 'A': lcd->ddr = &DDRA; lcd->port = &PORTA; break;
  c2:	8a e3       	ldi	r24, 0x3A	; 58
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	91 83       	std	Z+1, r25	; 0x01
  c8:	80 83       	st	Z, r24
  ca:	8b e3       	ldi	r24, 0x3B	; 59
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	14 c0       	rjmp	.+40     	; 0xf8 <setDDR+0x50>
        case 'B': lcd->ddr = &DDRB; lcd->port = &PORTB; break;
  d0:	87 e3       	ldi	r24, 0x37	; 55
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	91 83       	std	Z+1, r25	; 0x01
  d6:	80 83       	st	Z, r24
  d8:	88 e3       	ldi	r24, 0x38	; 56
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <setDDR+0x50>
		case 'C': lcd->ddr = &DDRC; lcd->port = &PORTC; break;
  de:	84 e3       	ldi	r24, 0x34	; 52
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	91 83       	std	Z+1, r25	; 0x01
  e4:	80 83       	st	Z, r24
  e6:	85 e3       	ldi	r24, 0x35	; 53
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	06 c0       	rjmp	.+12     	; 0xf8 <setDDR+0x50>
		case 'D': lcd->ddr = &DDRD; lcd->port = &PORTD; break;
  ec:	81 e3       	ldi	r24, 0x31	; 49
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	91 83       	std	Z+1, r25	; 0x01
  f2:	80 83       	st	Z, r24
  f4:	82 e3       	ldi	r24, 0x32	; 50
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	93 83       	std	Z+3, r25	; 0x03
  fa:	82 83       	std	Z+2, r24	; 0x02
    }
    *(lcd->ddr) = 0xFF; // Set as output
  fc:	01 90       	ld	r0, Z+
  fe:	f0 81       	ld	r31, Z
 100:	e0 2d       	mov	r30, r0
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	80 83       	st	Z, r24
}
 106:	08 95       	ret

00000108 <LCD_send4BitCommand>:

// Function to send a 4-bit command to the LCD
void LCD_send4BitCommand(LCD *lcd, char command) {
 108:	dc 01       	movw	r26, r24
    *(lcd->port) |= _BV(LCD_E); // Enable high
 10a:	12 96       	adiw	r26, 0x02	; 2
 10c:	ed 91       	ld	r30, X+
 10e:	fc 91       	ld	r31, X
 110:	13 97       	sbiw	r26, 0x03	; 3
 112:	80 81       	ld	r24, Z
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 83       	st	Z, r24
    // Send high nibble
    *(lcd->port) = (*(lcd->port) & 0x0F) | (command & 0xF0);
 118:	12 96       	adiw	r26, 0x02	; 2
 11a:	ed 91       	ld	r30, X+
 11c:	fc 91       	ld	r31, X
 11e:	13 97       	sbiw	r26, 0x03	; 3
 120:	80 81       	ld	r24, Z
 122:	60 7f       	andi	r22, 0xF0	; 240
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	86 2b       	or	r24, r22
 128:	80 83       	st	Z, r24
    *(lcd->port) &= ~_BV(LCD_E); // Enable low
 12a:	12 96       	adiw	r26, 0x02	; 2
 12c:	ed 91       	ld	r30, X+
 12e:	fc 91       	ld	r31, X
 130:	13 97       	sbiw	r26, 0x03	; 3
 132:	80 81       	ld	r24, Z
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_send4BitCommand+0x32>
    _delay_us(1);
}
 13e:	08 95       	ret

00000140 <LCD_writeCharacter>:
    for (uint8_t i = x; i < 16; i++) {
        LCD_writeCharacter(lcd, ' ');
    }
}

void LCD_writeCharacter(LCD *lcd, char c) {
 140:	ff 92       	push	r15
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	8c 01       	movw	r16, r24
 148:	f6 2e       	mov	r15, r22
    *(lcd->port) |= _BV(LCD_RS); // RS high for data
 14a:	dc 01       	movw	r26, r24
 14c:	12 96       	adiw	r26, 0x02	; 2
 14e:	ed 91       	ld	r30, X+
 150:	fc 91       	ld	r31, X
 152:	13 97       	sbiw	r26, 0x03	; 3
 154:	80 81       	ld	r24, Z
 156:	82 60       	ori	r24, 0x02	; 2
 158:	80 83       	st	Z, r24
    LCD_send4BitCommand(lcd, c & 0xF0); // Send high nibble
 15a:	60 7f       	andi	r22, 0xF0	; 240
 15c:	c8 01       	movw	r24, r16
 15e:	0e 94 84 00 	call	0x108	; 0x108 <LCD_send4BitCommand>
    LCD_send4BitCommand(lcd, c << 4); // Send low nibble
 162:	f2 94       	swap	r15
 164:	80 ef       	ldi	r24, 0xF0	; 240
 166:	f8 22       	and	r15, r24
 168:	c8 01       	movw	r24, r16
 16a:	6f 2d       	mov	r22, r15
 16c:	0e 94 84 00 	call	0x108	; 0x108 <LCD_send4BitCommand>
 170:	8d e0       	ldi	r24, 0x0D	; 13
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_writeCharacter+0x32>
    _delay_us(40);
}
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	ff 90       	pop	r15
 17c:	08 95       	ret

0000017e <LCD_sendInstruction>:
void LCD_setCoursor(LCD *lcd, uint8_t x, uint8_t y) {
    uint8_t address = (y * 0x40 + x) | 0x80;
    LCD_sendInstruction(lcd, address);
}

void LCD_sendInstruction(LCD *lcd, uint8_t cmd) {
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	8c 01       	movw	r16, r24
 186:	f6 2e       	mov	r15, r22
    *(lcd->port) &= ~_BV(LCD_RS); // RS low for instruction
 188:	dc 01       	movw	r26, r24
 18a:	12 96       	adiw	r26, 0x02	; 2
 18c:	ed 91       	ld	r30, X+
 18e:	fc 91       	ld	r31, X
 190:	13 97       	sbiw	r26, 0x03	; 3
 192:	80 81       	ld	r24, Z
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	80 83       	st	Z, r24
    LCD_send4BitCommand(lcd, cmd & 0xF0); // Send high nibble
 198:	60 7f       	andi	r22, 0xF0	; 240
 19a:	c8 01       	movw	r24, r16
 19c:	0e 94 84 00 	call	0x108	; 0x108 <LCD_send4BitCommand>
    LCD_send4BitCommand(lcd, cmd << 4); // Send low nibble
 1a0:	f2 94       	swap	r15
 1a2:	90 ef       	ldi	r25, 0xF0	; 240
 1a4:	f9 22       	and	r15, r25
 1a6:	c8 01       	movw	r24, r16
 1a8:	6f 2d       	mov	r22, r15
 1aa:	0e 94 84 00 	call	0x108	; 0x108 <LCD_send4BitCommand>
 1ae:	8d e0       	ldi	r24, 0x0D	; 13
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_sendInstruction+0x32>
    _delay_us(40);
}
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	08 95       	ret

000001bc <LCD_setCoursor>:
    }
}

void LCD_setCoursor(LCD *lcd, uint8_t x, uint8_t y) {
    uint8_t address = (y * 0x40 + x) | 0x80;
    LCD_sendInstruction(lcd, address);
 1bc:	42 95       	swap	r20
 1be:	44 0f       	add	r20, r20
 1c0:	44 0f       	add	r20, r20
 1c2:	40 7c       	andi	r20, 0xC0	; 192
 1c4:	46 0f       	add	r20, r22
 1c6:	40 68       	ori	r20, 0x80	; 128
 1c8:	64 2f       	mov	r22, r20
 1ca:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_sendInstruction>
}
 1ce:	08 95       	ret

000001d0 <LCD_clearFromPoint>:
void LCD_clear(LCD *lcd) {
    LCD_sendInstruction(lcd, 0x01); // Clear display command
    _delay_ms(2); // Clearing delay
}

void LCD_clearFromPoint(LCD *lcd, uint8_t x, uint8_t y) {
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
 1d8:	16 2f       	mov	r17, r22
    LCD_setCoursor(lcd, x, y);
 1da:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_setCoursor>
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <LCD_clearFromPoint+0x1a>
    for (uint8_t i = x; i < 16; i++) {
        LCD_writeCharacter(lcd, ' ');
 1e0:	ce 01       	movw	r24, r28
 1e2:	60 e2       	ldi	r22, 0x20	; 32
 1e4:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_writeCharacter>
    _delay_ms(2); // Clearing delay
}

void LCD_clearFromPoint(LCD *lcd, uint8_t x, uint8_t y) {
    LCD_setCoursor(lcd, x, y);
    for (uint8_t i = x; i < 16; i++) {
 1e8:	1f 5f       	subi	r17, 0xFF	; 255
 1ea:	10 31       	cpi	r17, 0x10	; 16
 1ec:	c8 f3       	brcs	.-14     	; 0x1e0 <LCD_clearFromPoint+0x10>
        LCD_writeCharacter(lcd, ' ');
    }
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	08 95       	ret

000001f6 <LCD_writeText>:
    LCD_send4BitCommand(lcd, c & 0xF0); // Send high nibble
    LCD_send4BitCommand(lcd, c << 4); // Send low nibble
    _delay_us(40);
}

void LCD_writeText(LCD *lcd, char *text) {
 1f6:	cf 92       	push	r12
 1f8:	df 92       	push	r13
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	7c 01       	movw	r14, r24
 206:	6b 01       	movw	r12, r22
 208:	10 e0       	ldi	r17, 0x00	; 0
 20a:	0b c0       	rjmp	.+22     	; 0x222 <LCD_writeText+0x2c>
    for (uint8_t i = 0; text[i] != '\0'; i++) {
        if (i == 16) LCD_sendInstruction(lcd, 0xC0); // Move to next line
 20c:	10 31       	cpi	r17, 0x10	; 16
 20e:	21 f4       	brne	.+8      	; 0x218 <LCD_writeText+0x22>
 210:	c7 01       	movw	r24, r14
 212:	60 ec       	ldi	r22, 0xC0	; 192
 214:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_sendInstruction>
        LCD_writeCharacter(lcd, text[i]);
 218:	c7 01       	movw	r24, r14
 21a:	68 81       	ld	r22, Y
 21c:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_writeCharacter>
    LCD_send4BitCommand(lcd, c << 4); // Send low nibble
    _delay_us(40);
}

void LCD_writeText(LCD *lcd, char *text) {
    for (uint8_t i = 0; text[i] != '\0'; i++) {
 220:	1f 5f       	subi	r17, 0xFF	; 255
 222:	e6 01       	movw	r28, r12
 224:	c1 0f       	add	r28, r17
 226:	d1 1d       	adc	r29, r1
 228:	88 81       	ld	r24, Y
 22a:	88 23       	and	r24, r24
 22c:	79 f7       	brne	.-34     	; 0x20c <LCD_writeText+0x16>
        if (i == 16) LCD_sendInstruction(lcd, 0xC0); // Move to next line
        LCD_writeCharacter(lcd, text[i]);
    }
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	cf 90       	pop	r12
 23c:	08 95       	ret

0000023e <LCD_clear>:
    LCD_clear(lcd); // Clear Display
    LCD_sendInstruction(lcd, 0x06); // Entry Mode: Increment cursor, No shift
}

void LCD_clear(LCD *lcd) {
    LCD_sendInstruction(lcd, 0x01); // Clear display command
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_sendInstruction>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 244:	84 ef       	ldi	r24, 0xF4	; 244
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_clear+0xa>
    _delay_ms(2); // Clearing delay
}
 24c:	08 95       	ret

0000024e <LCD_init>:
    *(lcd->port) = (*(lcd->port) & 0x0F) | (command & 0xF0);
    *(lcd->port) &= ~_BV(LCD_E); // Enable low
    _delay_us(1);
}

void LCD_init(LCD *lcd, char port) {
 24e:	ff 92       	push	r15
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	8c 01       	movw	r16, r24
    setDDR(lcd, port);
 256:	0e 94 54 00 	call	0xa8	; 0xa8 <setDDR>
 25a:	88 e8       	ldi	r24, 0x88	; 136
 25c:	93 e1       	ldi	r25, 0x13	; 19
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_init+0x10>
    _delay_ms(20); // Wait for more than 15ms after VCC rises to 4.5V

    // Set to 4-bit mode
    LCD_send4BitCommand(lcd, 0x30);
 262:	c8 01       	movw	r24, r16
 264:	60 e3       	ldi	r22, 0x30	; 48
 266:	0e 94 84 00 	call	0x108	; 0x108 <LCD_send4BitCommand>
 26a:	82 ee       	ldi	r24, 0xE2	; 226
 26c:	94 e0       	ldi	r25, 0x04	; 4
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_init+0x20>
    _delay_ms(5);
    LCD_send4BitCommand(lcd, 0x30);
 272:	c8 01       	movw	r24, r16
 274:	60 e3       	ldi	r22, 0x30	; 48
 276:	0e 94 84 00 	call	0x108	; 0x108 <LCD_send4BitCommand>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 27a:	21 e2       	ldi	r18, 0x21	; 33
 27c:	f2 2e       	mov	r15, r18
 27e:	8f 2d       	mov	r24, r15
 280:	8a 95       	dec	r24
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_init+0x32>
    _delay_us(100);
    LCD_send4BitCommand(lcd, 0x30);
 284:	c8 01       	movw	r24, r16
 286:	60 e3       	ldi	r22, 0x30	; 48
 288:	0e 94 84 00 	call	0x108	; 0x108 <LCD_send4BitCommand>
 28c:	8f 2d       	mov	r24, r15
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <LCD_init+0x40>
    _delay_us(100);
    LCD_send4BitCommand(lcd, 0x20);
 292:	c8 01       	movw	r24, r16
 294:	60 e2       	ldi	r22, 0x20	; 32
 296:	0e 94 84 00 	call	0x108	; 0x108 <LCD_send4BitCommand>
 29a:	fa 94       	dec	r15
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_init+0x4c>
    _delay_us(100);

    LCD_sendInstruction(lcd, 0x28); // Function Set: 4-bit, 2 Line, 5x8 dots
 29e:	c8 01       	movw	r24, r16
 2a0:	68 e2       	ldi	r22, 0x28	; 40
 2a2:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_sendInstruction>
    LCD_sendInstruction(lcd, 0x0C); // Display ON, Cursor OFF, Blink OFF
 2a6:	c8 01       	movw	r24, r16
 2a8:	6c e0       	ldi	r22, 0x0C	; 12
 2aa:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_sendInstruction>
    LCD_clear(lcd); // Clear Display
 2ae:	c8 01       	movw	r24, r16
 2b0:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_clear>
    LCD_sendInstruction(lcd, 0x06); // Entry Mode: Increment cursor, No shift
 2b4:	c8 01       	movw	r24, r16
 2b6:	66 e0       	ldi	r22, 0x06	; 6
 2b8:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_sendInstruction>
}
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	08 95       	ret

000002c4 <main>:
#include "my_keyboard_lib.h"
#include "menu.h"

#define F_CPU 1000000UL

int main(void) {
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	df 93       	push	r29
 2ce:	cf 93       	push	r28
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	28 97       	sbiw	r28, 0x08	; 8
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
	// Set kbd
	set_DDR('A');
 2e0:	81 e4       	ldi	r24, 0x41	; 65
 2e2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <set_DDR>
	//Led bar
	DDRD =0xFF;
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	81 bb       	out	0x11, r24	; 17
	PORTD =0xFF;
 2ea:	82 bb       	out	0x12, r24	; 18
	
	LCD lcd1;
    LCD_init(&lcd1, 'B'); // Initialize LCD on PORTB
 2ec:	7e 01       	movw	r14, r28
 2ee:	08 94       	sec
 2f0:	e1 1c       	adc	r14, r1
 2f2:	f1 1c       	adc	r15, r1
 2f4:	c7 01       	movw	r24, r14
 2f6:	62 e4       	ldi	r22, 0x42	; 66
 2f8:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_init>

	Menu menu;
    menu_init(&menu, &lcd1);
 2fc:	8e 01       	movw	r16, r28
 2fe:	0b 5f       	subi	r16, 0xFB	; 251
 300:	1f 4f       	sbci	r17, 0xFF	; 255
 302:	c8 01       	movw	r24, r16
 304:	b7 01       	movw	r22, r14
 306:	0e 94 aa 02 	call	0x554	; 0x554 <menu_init>


	menu_display(&menu);
 30a:	c8 01       	movw	r24, r16
 30c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <menu_display>
    {
		 char key = get_key('d', 'A');
		 
		 // only refresh screen if key state is changed
		 if(lastKey!=key) {
         	menu_display(&menu);
 310:	f0 2e       	mov	r15, r16
 312:	e1 2e       	mov	r14, r17
 314:	01 c0       	rjmp	.+2      	; 0x318 <main+0x54>

	Menu menu;
    menu_init(&menu, &lcd1);


	menu_display(&menu);
 316:	01 2f       	mov	r16, r17
	
	char lastKey;

    while (1) 
    {
		 char key = get_key('d', 'A');
 318:	84 e6       	ldi	r24, 0x64	; 100
 31a:	61 e4       	ldi	r22, 0x41	; 65
 31c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <get_key>
 320:	18 2f       	mov	r17, r24
		 
		 // only refresh screen if key state is changed
		 if(lastKey!=key) {
 322:	08 17       	cp	r16, r24
 324:	c9 f3       	breq	.-14     	; 0x318 <main+0x54>
         	menu_display(&menu);
 326:	8f 2d       	mov	r24, r15
 328:	9e 2d       	mov	r25, r14
 32a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <menu_display>

		 switch (key) {
 32e:	18 30       	cpi	r17, 0x08	; 8
 330:	81 f0       	breq	.+32     	; 0x352 <main+0x8e>
 332:	19 30       	cpi	r17, 0x09	; 9
 334:	18 f4       	brcc	.+6      	; 0x33c <main+0x78>
 336:	14 30       	cpi	r17, 0x04	; 4
 338:	71 f7       	brne	.-36     	; 0x316 <main+0x52>
 33a:	05 c0       	rjmp	.+10     	; 0x346 <main+0x82>
 33c:	1c 30       	cpi	r17, 0x0C	; 12
 33e:	79 f0       	breq	.+30     	; 0x35e <main+0x9a>
 340:	10 31       	cpi	r17, 0x10	; 16
 342:	49 f7       	brne	.-46     	; 0x316 <main+0x52>
 344:	12 c0       	rjmp	.+36     	; 0x36a <main+0xa6>
            case 4: // Up
                menu_prevItem(&menu);
 346:	8f 2d       	mov	r24, r15
 348:	9e 2d       	mov	r25, r14
 34a:	0e 94 c6 01 	call	0x38c	; 0x38c <menu_prevItem>
 34e:	04 e0       	ldi	r16, 0x04	; 4
 350:	e3 cf       	rjmp	.-58     	; 0x318 <main+0x54>
                break;
            case 8: // Down
                menu_nextItem(&menu);
 352:	8f 2d       	mov	r24, r15
 354:	9e 2d       	mov	r25, r14
 356:	0e 94 bb 01 	call	0x376	; 0x376 <menu_nextItem>
 35a:	08 e0       	ldi	r16, 0x08	; 8
 35c:	dd cf       	rjmp	.-70     	; 0x318 <main+0x54>
                break;
            case 12:  // Return
                menu_actionBackward(&menu);
 35e:	8f 2d       	mov	r24, r15
 360:	9e 2d       	mov	r25, r14
 362:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <menu_actionBackward>
 366:	0c e0       	ldi	r16, 0x0C	; 12
 368:	d7 cf       	rjmp	.-82     	; 0x318 <main+0x54>
                break;
            case 16: // Enter
                
				menu_actionForward(&menu);
 36a:	8f 2d       	mov	r24, r15
 36c:	9e 2d       	mov	r25, r14
 36e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <menu_actionForward>
 372:	00 e1       	ldi	r16, 0x10	; 16
 374:	d1 cf       	rjmp	.-94     	; 0x318 <main+0x54>

00000376 <menu_nextItem>:
	else
		LCD_writeText(menu->lcd, "###END###");

}

void menu_nextItem(Menu *menu) {
 376:	dc 01       	movw	r26, r24
    if (menu->current->next != 0) {
 378:	ed 91       	ld	r30, X+
 37a:	fc 91       	ld	r31, X
 37c:	11 97       	sbiw	r26, 0x01	; 1
 37e:	83 89       	ldd	r24, Z+19	; 0x13
 380:	94 89       	ldd	r25, Z+20	; 0x14
 382:	00 97       	sbiw	r24, 0x00	; 0
 384:	11 f0       	breq	.+4      	; 0x38a <menu_nextItem+0x14>
        menu->current = menu->current->next;
 386:	8d 93       	st	X+, r24
 388:	9c 93       	st	X, r25
 38a:	08 95       	ret

0000038c <menu_prevItem>:
    }
}

void menu_prevItem(Menu *menu) {
 38c:	dc 01       	movw	r26, r24
    if (menu->current->prev != 0) {
 38e:	ed 91       	ld	r30, X+
 390:	fc 91       	ld	r31, X
 392:	11 97       	sbiw	r26, 0x01	; 1
 394:	81 89       	ldd	r24, Z+17	; 0x11
 396:	92 89       	ldd	r25, Z+18	; 0x12
 398:	00 97       	sbiw	r24, 0x00	; 0
 39a:	11 f0       	breq	.+4      	; 0x3a0 <menu_prevItem+0x14>
        menu->current = menu->current->prev;
 39c:	8d 93       	st	X+, r24
 39e:	9c 93       	st	X, r25
 3a0:	08 95       	ret

000003a2 <moveToChild>:
    }
}

void moveToChild(Menu *menu) {
 3a2:	dc 01       	movw	r26, r24
    if(menu->current->child != 0) {
 3a4:	ed 91       	ld	r30, X+
 3a6:	fc 91       	ld	r31, X
 3a8:	11 97       	sbiw	r26, 0x01	; 1
 3aa:	85 89       	ldd	r24, Z+21	; 0x15
 3ac:	96 89       	ldd	r25, Z+22	; 0x16
 3ae:	00 97       	sbiw	r24, 0x00	; 0
 3b0:	11 f0       	breq	.+4      	; 0x3b6 <moveToChild+0x14>
        menu->current = menu->current->child;
 3b2:	8d 93       	st	X+, r24
 3b4:	9c 93       	st	X, r25
 3b6:	08 95       	ret

000003b8 <moveToParent>:
    }
}

void moveToParent(Menu *menu) {
 3b8:	dc 01       	movw	r26, r24
	if(menu->current->parent != 0) {
 3ba:	ed 91       	ld	r30, X+
 3bc:	fc 91       	ld	r31, X
 3be:	11 97       	sbiw	r26, 0x01	; 1
 3c0:	87 89       	ldd	r24, Z+23	; 0x17
 3c2:	90 8d       	ldd	r25, Z+24	; 0x18
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	11 f0       	breq	.+4      	; 0x3cc <moveToParent+0x14>
		menu->current = menu->current->parent;
 3c8:	8d 93       	st	X+, r24
 3ca:	9c 93       	st	X, r25
 3cc:	08 95       	ret

000003ce <menu_actionForward>:
	}
}

void menu_actionForward(Menu *menu) {
 3ce:	fc 01       	movw	r30, r24
    if (menu != 0 && menu->current != 0 && menu->current->actionForward != 0) {
 3d0:	00 97       	sbiw	r24, 0x00	; 0
 3d2:	69 f0       	breq	.+26     	; 0x3ee <menu_actionForward+0x20>
 3d4:	a0 81       	ld	r26, Z
 3d6:	b1 81       	ldd	r27, Z+1	; 0x01
 3d8:	10 97       	sbiw	r26, 0x00	; 0
 3da:	49 f0       	breq	.+18     	; 0x3ee <menu_actionForward+0x20>
 3dc:	59 96       	adiw	r26, 0x19	; 25
 3de:	2d 91       	ld	r18, X+
 3e0:	3c 91       	ld	r19, X
 3e2:	5a 97       	sbiw	r26, 0x1a	; 26
 3e4:	21 15       	cp	r18, r1
 3e6:	31 05       	cpc	r19, r1
 3e8:	11 f0       	breq	.+4      	; 0x3ee <menu_actionForward+0x20>
        menu->current->actionForward(menu);
 3ea:	f9 01       	movw	r30, r18
 3ec:	09 95       	icall
 3ee:	08 95       	ret

000003f0 <menu_actionBackward>:
    }
}

void menu_actionBackward(Menu *menu) {
 3f0:	fc 01       	movw	r30, r24
    if (menu != 0 && menu->current != 0 && menu->current->actionBackward != 0) {
 3f2:	00 97       	sbiw	r24, 0x00	; 0
 3f4:	69 f0       	breq	.+26     	; 0x410 <menu_actionBackward+0x20>
 3f6:	a0 81       	ld	r26, Z
 3f8:	b1 81       	ldd	r27, Z+1	; 0x01
 3fa:	10 97       	sbiw	r26, 0x00	; 0
 3fc:	49 f0       	breq	.+18     	; 0x410 <menu_actionBackward+0x20>
 3fe:	5b 96       	adiw	r26, 0x1b	; 27
 400:	2d 91       	ld	r18, X+
 402:	3c 91       	ld	r19, X
 404:	5c 97       	sbiw	r26, 0x1c	; 28
 406:	21 15       	cp	r18, r1
 408:	31 05       	cpc	r19, r1
 40a:	11 f0       	breq	.+4      	; 0x410 <menu_actionBackward+0x20>
        menu->current->actionBackward(menu);
 40c:	f9 01       	movw	r30, r18
 40e:	09 95       	icall
 410:	08 95       	ret

00000412 <foo1>:
    }
}

void foo1(Menu *menu)
{
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	8c 01       	movw	r16, r24
	LCD_clear(menu->lcd);
 41c:	fc 01       	movw	r30, r24
 41e:	82 81       	ldd	r24, Z+2	; 0x02
 420:	93 81       	ldd	r25, Z+3	; 0x03
 422:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_clear>
	LCD_writeText(menu->lcd, "Hold 1 to escape");
 426:	f8 01       	movw	r30, r16
 428:	82 81       	ldd	r24, Z+2	; 0x02
 42a:	93 81       	ldd	r25, Z+3	; 0x03
 42c:	60 e6       	ldi	r22, 0x60	; 96
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_writeText>
	while(1){
		if (get_key('m', 'A') == 1)
			break;
        for (uint8_t i = 0; i < 7; ++i) {
            PORTD = (1 << i) | (1 << (i + 1)); // Light up two adjacent LEDs
 434:	c1 e0       	ldi	r28, 0x01	; 1
 436:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 438:	00 e5       	ldi	r16, 0x50	; 80
 43a:	13 ec       	ldi	r17, 0xC3	; 195
void foo1(Menu *menu)
{
	LCD_clear(menu->lcd);
	LCD_writeText(menu->lcd, "Hold 1 to escape");
	while(1){
		if (get_key('m', 'A') == 1)
 43c:	8d e6       	ldi	r24, 0x6D	; 109
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	61 e4       	ldi	r22, 0x41	; 65
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <get_key>
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	a1 f1       	breq	.+104    	; 0x4b4 <foo1+0xa2>
			break;
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	50 e0       	ldi	r21, 0x00	; 0
        for (uint8_t i = 0; i < 7; ++i) {
            PORTD = (1 << i) | (1 << (i + 1)); // Light up two adjacent LEDs
 450:	ce 01       	movw	r24, r28
 452:	04 2e       	mov	r0, r20
 454:	02 c0       	rjmp	.+4      	; 0x45a <foo1+0x48>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	0a 94       	dec	r0
 45c:	e2 f7       	brpl	.-8      	; 0x456 <foo1+0x44>
        menu->current->actionBackward(menu);
    }
}

void foo1(Menu *menu)
{
 45e:	4f 5f       	subi	r20, 0xFF	; 255
 460:	5f 4f       	sbci	r21, 0xFF	; 255
	LCD_writeText(menu->lcd, "Hold 1 to escape");
	while(1){
		if (get_key('m', 'A') == 1)
			break;
        for (uint8_t i = 0; i < 7; ++i) {
            PORTD = (1 << i) | (1 << (i + 1)); // Light up two adjacent LEDs
 462:	9e 01       	movw	r18, r28
 464:	04 2e       	mov	r0, r20
 466:	02 c0       	rjmp	.+4      	; 0x46c <foo1+0x5a>
 468:	22 0f       	add	r18, r18
 46a:	33 1f       	adc	r19, r19
 46c:	0a 94       	dec	r0
 46e:	e2 f7       	brpl	.-8      	; 0x468 <foo1+0x56>
 470:	82 2b       	or	r24, r18
 472:	82 bb       	out	0x12, r24	; 18
 474:	c8 01       	movw	r24, r16
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <foo1+0x64>
	LCD_clear(menu->lcd);
	LCD_writeText(menu->lcd, "Hold 1 to escape");
	while(1){
		if (get_key('m', 'A') == 1)
			break;
        for (uint8_t i = 0; i < 7; ++i) {
 47a:	47 30       	cpi	r20, 0x07	; 7
 47c:	51 05       	cpc	r21, r1
 47e:	41 f7       	brne	.-48     	; 0x450 <foo1+0x3e>
 480:	46 e0       	ldi	r20, 0x06	; 6
 482:	50 e0       	ldi	r21, 0x00	; 0
            _delay_ms(200);
        }

        // Move the snake backward
        for (int8_t i = 6; i > 0; --i) {
            PORTD = (1 << i) | (1 << (i - 1)); // Light up two adjacent LEDs
 484:	ca 01       	movw	r24, r20
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	9e 01       	movw	r18, r28
 48a:	08 2e       	mov	r0, r24
 48c:	02 c0       	rjmp	.+4      	; 0x492 <foo1+0x80>
 48e:	22 0f       	add	r18, r18
 490:	33 1f       	adc	r19, r19
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <foo1+0x7c>
 496:	be 01       	movw	r22, r28
 498:	02 c0       	rjmp	.+4      	; 0x49e <foo1+0x8c>
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	4a 95       	dec	r20
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <foo1+0x88>
 4a2:	26 2b       	or	r18, r22
 4a4:	22 bb       	out	0x12, r18	; 18
 4a6:	f8 01       	movw	r30, r16
 4a8:	31 97       	sbiw	r30, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <foo1+0x96>
 4ac:	ac 01       	movw	r20, r24
            PORTD = (1 << i) | (1 << (i + 1)); // Light up two adjacent LEDs
            _delay_ms(200);
        }

        // Move the snake backward
        for (int8_t i = 6; i > 0; --i) {
 4ae:	88 23       	and	r24, r24
 4b0:	49 f7       	brne	.-46     	; 0x484 <foo1+0x72>
 4b2:	c4 cf       	rjmp	.-120    	; 0x43c <foo1+0x2a>
            PORTD = (1 << i) | (1 << (i - 1)); // Light up two adjacent LEDs
            _delay_ms(200);
        }
	}
	PORTD =0x00;
 4b4:	12 ba       	out	0x12, r1	; 18
}
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	0f 91       	pop	r16
 4be:	08 95       	ret

000004c0 <menu_display>:
    option3_2.actionForward = &moveToChild;
    option3_2.actionBackward = &moveToParent;
}


void menu_display(Menu *menu) {
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	ec 01       	movw	r28, r24
	if(menu == NULL || menu->current == NULL)
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	09 f4       	brne	.+2      	; 0x4cc <menu_display+0xc>
 4ca:	41 c0       	rjmp	.+130    	; 0x54e <menu_display+0x8e>
 4cc:	88 81       	ld	r24, Y
 4ce:	99 81       	ldd	r25, Y+1	; 0x01
 4d0:	89 2b       	or	r24, r25
 4d2:	e9 f1       	breq	.+122    	; 0x54e <menu_display+0x8e>
		return;
	
    LCD_clear(menu->lcd);
 4d4:	8a 81       	ldd	r24, Y+2	; 0x02
 4d6:	9b 81       	ldd	r25, Y+3	; 0x03
 4d8:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_clear>

    LCD_writeCharacter(menu->lcd, '>');
 4dc:	8a 81       	ldd	r24, Y+2	; 0x02
 4de:	9b 81       	ldd	r25, Y+3	; 0x03
 4e0:	6e e3       	ldi	r22, 0x3E	; 62
 4e2:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_writeCharacter>
	if(menu->current->child != NULL)
 4e6:	e8 81       	ld	r30, Y
 4e8:	f9 81       	ldd	r31, Y+1	; 0x01
 4ea:	85 89       	ldd	r24, Z+21	; 0x15
 4ec:	96 89       	ldd	r25, Z+22	; 0x16
 4ee:	89 2b       	or	r24, r25
 4f0:	29 f0       	breq	.+10     	; 0x4fc <menu_display+0x3c>
		LCD_writeCharacter(menu->lcd, '+');
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	9b 81       	ldd	r25, Y+3	; 0x03
 4f6:	6b e2       	ldi	r22, 0x2B	; 43
 4f8:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_writeCharacter>
	
	LCD_writeText(menu->lcd, menu->current->text);
 4fc:	68 81       	ld	r22, Y
 4fe:	79 81       	ldd	r23, Y+1	; 0x01
 500:	8a 81       	ldd	r24, Y+2	; 0x02
 502:	9b 81       	ldd	r25, Y+3	; 0x03
 504:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_writeText>
	LCD_setCoursor(menu->lcd, 0, 1);
 508:	8a 81       	ldd	r24, Y+2	; 0x02
 50a:	9b 81       	ldd	r25, Y+3	; 0x03
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_setCoursor>
	if(menu->current->next != 0) {
 514:	e8 81       	ld	r30, Y
 516:	f9 81       	ldd	r31, Y+1	; 0x01
 518:	03 88       	ldd	r0, Z+19	; 0x13
 51a:	f4 89       	ldd	r31, Z+20	; 0x14
 51c:	e0 2d       	mov	r30, r0
 51e:	30 97       	sbiw	r30, 0x00	; 0
 520:	81 f0       	breq	.+32     	; 0x542 <menu_display+0x82>
		if(menu->current->next->child != NULL)
 522:	85 89       	ldd	r24, Z+21	; 0x15
 524:	96 89       	ldd	r25, Z+22	; 0x16
 526:	89 2b       	or	r24, r25
 528:	29 f0       	breq	.+10     	; 0x534 <menu_display+0x74>
			LCD_writeCharacter(menu->lcd, '+');
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	9b 81       	ldd	r25, Y+3	; 0x03
 52e:	6b e2       	ldi	r22, 0x2B	; 43
 530:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_writeCharacter>
		LCD_writeText(menu->lcd, menu->current->next->text);
 534:	e8 81       	ld	r30, Y
 536:	f9 81       	ldd	r31, Y+1	; 0x01
 538:	63 89       	ldd	r22, Z+19	; 0x13
 53a:	74 89       	ldd	r23, Z+20	; 0x14
 53c:	8a 81       	ldd	r24, Y+2	; 0x02
 53e:	9b 81       	ldd	r25, Y+3	; 0x03
 540:	04 c0       	rjmp	.+8      	; 0x54a <menu_display+0x8a>
    }
	else
		LCD_writeText(menu->lcd, "###END###");
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	9b 81       	ldd	r25, Y+3	; 0x03
 546:	61 e7       	ldi	r22, 0x71	; 113
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_writeText>

}
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	08 95       	ret

00000554 <menu_init>:
#include "menu.h"
#include "lcd_lib.h"
#include <string.h>


void menu_init(Menu *menu, LCD *lcd) {
 554:	6f 92       	push	r6
 556:	7f 92       	push	r7
 558:	8f 92       	push	r8
 55a:	9f 92       	push	r9
 55c:	af 92       	push	r10
 55e:	bf 92       	push	r11
 560:	cf 92       	push	r12
 562:	df 92       	push	r13
 564:	ef 92       	push	r14
 566:	ff 92       	push	r15
 568:	0f 93       	push	r16
 56a:	1f 93       	push	r17
 56c:	fc 01       	movw	r30, r24
    static MenuItem option1, option2, option3;
    static MenuItem option1_1, option1_2;
    static MenuItem option2_1, option2_2;
	static MenuItem option3_1, option3_2;

    menu->current = &option1;
 56e:	04 ec       	ldi	r16, 0xC4	; 196
 570:	11 e0       	ldi	r17, 0x01	; 1
 572:	11 83       	std	Z+1, r17	; 0x01
 574:	00 83       	st	Z, r16
    menu->lcd = lcd;
 576:	73 83       	std	Z+3, r23	; 0x03
 578:	62 83       	std	Z+2, r22	; 0x02
    // ================== option 1 ==================
    strcpy(option1.text,"Menu 1");
 57a:	c8 01       	movw	r24, r16
 57c:	6b e7       	ldi	r22, 0x7B	; 123
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	0e 94 bb 04 	call	0x976	; 0x976 <strcpy>
    option1.next = &option2;
 584:	47 ea       	ldi	r20, 0xA7	; 167
 586:	c4 2e       	mov	r12, r20
 588:	41 e0       	ldi	r20, 0x01	; 1
 58a:	d4 2e       	mov	r13, r20
 58c:	d0 92 d8 01 	sts	0x01D8, r13
 590:	c0 92 d7 01 	sts	0x01D7, r12
    option1.prev = NULL;
 594:	10 92 d6 01 	sts	0x01D6, r1
 598:	10 92 d5 01 	sts	0x01D5, r1
    option1.child = NULL;
 59c:	10 92 da 01 	sts	0x01DA, r1
 5a0:	10 92 d9 01 	sts	0x01D9, r1
    option1.parent = NULL;
 5a4:	10 92 dc 01 	sts	0x01DC, r1
 5a8:	10 92 db 01 	sts	0x01DB, r1
    option1.actionForward = &moveToChild;
 5ac:	31 ed       	ldi	r19, 0xD1	; 209
 5ae:	83 2e       	mov	r8, r19
 5b0:	31 e0       	ldi	r19, 0x01	; 1
 5b2:	93 2e       	mov	r9, r19
 5b4:	90 92 de 01 	sts	0x01DE, r9
 5b8:	80 92 dd 01 	sts	0x01DD, r8
    option1.actionBackward = &moveToParent;
 5bc:	2c ed       	ldi	r18, 0xDC	; 220
 5be:	e2 2e       	mov	r14, r18
 5c0:	21 e0       	ldi	r18, 0x01	; 1
 5c2:	f2 2e       	mov	r15, r18
 5c4:	f0 92 e0 01 	sts	0x01E0, r15
 5c8:	e0 92 df 01 	sts	0x01DF, r14

    // ================== option 2 ==================
    strcpy(option2.text,"Menu 2");
 5cc:	c6 01       	movw	r24, r12
 5ce:	62 e8       	ldi	r22, 0x82	; 130
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	0e 94 bb 04 	call	0x976	; 0x976 <strcpy>
    option2.next = &option3;
 5d6:	9a e8       	ldi	r25, 0x8A	; 138
 5d8:	69 2e       	mov	r6, r25
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	79 2e       	mov	r7, r25
 5de:	70 92 bb 01 	sts	0x01BB, r7
 5e2:	60 92 ba 01 	sts	0x01BA, r6
    option2.prev = &option1;
 5e6:	10 93 b9 01 	sts	0x01B9, r17
 5ea:	00 93 b8 01 	sts	0x01B8, r16
    option2.child = NULL;
 5ee:	10 92 bd 01 	sts	0x01BD, r1
 5f2:	10 92 bc 01 	sts	0x01BC, r1
    option2.parent = NULL;
 5f6:	10 92 bf 01 	sts	0x01BF, r1
 5fa:	10 92 be 01 	sts	0x01BE, r1
    option2.actionForward = &moveToChild;
 5fe:	90 92 c1 01 	sts	0x01C1, r9
 602:	80 92 c0 01 	sts	0x01C0, r8
    option2.actionBackward = &moveToParent;
 606:	f0 92 c3 01 	sts	0x01C3, r15
 60a:	e0 92 c2 01 	sts	0x01C2, r14

    // ================== option 3 ==================
    strcpy(option3.text,"Menu 3");
 60e:	c3 01       	movw	r24, r6
 610:	69 e8       	ldi	r22, 0x89	; 137
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	0e 94 bb 04 	call	0x976	; 0x976 <strcpy>
    option3.next = NULL;
 618:	10 92 9e 01 	sts	0x019E, r1
 61c:	10 92 9d 01 	sts	0x019D, r1
    option3.prev = &option2;
 620:	d0 92 9c 01 	sts	0x019C, r13
 624:	c0 92 9b 01 	sts	0x019B, r12
    option3.child = NULL;
 628:	10 92 a0 01 	sts	0x01A0, r1
 62c:	10 92 9f 01 	sts	0x019F, r1
    option3.parent = NULL;
 630:	10 92 a2 01 	sts	0x01A2, r1
 634:	10 92 a1 01 	sts	0x01A1, r1
    option3.actionForward = &moveToChild;
 638:	90 92 a4 01 	sts	0x01A4, r9
 63c:	80 92 a3 01 	sts	0x01A3, r8
    option3.actionBackward = &moveToParent;
 640:	f0 92 a6 01 	sts	0x01A6, r15
 644:	e0 92 a5 01 	sts	0x01A5, r14

    // ================== option 1_1 ==================
    strcpy(option1_1.text,"Program 1_1");
 648:	8d e6       	ldi	r24, 0x6D	; 109
 64a:	a8 2e       	mov	r10, r24
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	b8 2e       	mov	r11, r24
 650:	c5 01       	movw	r24, r10
 652:	60 e9       	ldi	r22, 0x90	; 144
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	0e 94 bb 04 	call	0x976	; 0x976 <strcpy>
    option1_1.next = &option1_2;
 65a:	80 e5       	ldi	r24, 0x50	; 80
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	90 93 81 01 	sts	0x0181, r25
 662:	80 93 80 01 	sts	0x0180, r24
    option1_1.prev = NULL;
 666:	10 92 7f 01 	sts	0x017F, r1
 66a:	10 92 7e 01 	sts	0x017E, r1
    option1_1.child = NULL;
 66e:	10 92 83 01 	sts	0x0183, r1
 672:	10 92 82 01 	sts	0x0182, r1
    option1_1.parent = &option1;
 676:	10 93 85 01 	sts	0x0185, r17
 67a:	00 93 84 01 	sts	0x0184, r16
    option1.child = &option1_1; // link parent
 67e:	b0 92 da 01 	sts	0x01DA, r11
 682:	a0 92 d9 01 	sts	0x01D9, r10
    option1_1.actionForward = foo1; ///////////////////////
 686:	29 e0       	ldi	r18, 0x09	; 9
 688:	32 e0       	ldi	r19, 0x02	; 2
 68a:	30 93 87 01 	sts	0x0187, r19
 68e:	20 93 86 01 	sts	0x0186, r18
    option1_1.actionBackward = &moveToParent;
 692:	f0 92 89 01 	sts	0x0189, r15
 696:	e0 92 88 01 	sts	0x0188, r14

    // ================== option 1_2 ==================
    strcpy(option1_2.text,"Program 1_2");
 69a:	6c e9       	ldi	r22, 0x9C	; 156
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	0e 94 bb 04 	call	0x976	; 0x976 <strcpy>
    option1_2.next = NULL;
 6a2:	10 92 64 01 	sts	0x0164, r1
 6a6:	10 92 63 01 	sts	0x0163, r1
    option1_2.prev = &option1_1;
 6aa:	b0 92 62 01 	sts	0x0162, r11
 6ae:	a0 92 61 01 	sts	0x0161, r10
    option1_2.child = NULL;
 6b2:	10 92 66 01 	sts	0x0166, r1
 6b6:	10 92 65 01 	sts	0x0165, r1
    option1_2.parent = &option1;
 6ba:	10 93 68 01 	sts	0x0168, r17
 6be:	00 93 67 01 	sts	0x0167, r16
    option1_2.actionForward = NULL;
 6c2:	10 92 6a 01 	sts	0x016A, r1
 6c6:	10 92 69 01 	sts	0x0169, r1
    option1_2.actionBackward = &moveToParent;
 6ca:	f0 92 6c 01 	sts	0x016C, r15
 6ce:	e0 92 6b 01 	sts	0x016B, r14

    // ================== option 2_1 ==================
    strcpy(option2_1.text,"Program 2_1");
 6d2:	03 e3       	ldi	r16, 0x33	; 51
 6d4:	11 e0       	ldi	r17, 0x01	; 1
 6d6:	c8 01       	movw	r24, r16
 6d8:	68 ea       	ldi	r22, 0xA8	; 168
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	0e 94 bb 04 	call	0x976	; 0x976 <strcpy>
    option2_1.next = &option2_2;
 6e0:	86 e1       	ldi	r24, 0x16	; 22
 6e2:	91 e0       	ldi	r25, 0x01	; 1
 6e4:	90 93 47 01 	sts	0x0147, r25
 6e8:	80 93 46 01 	sts	0x0146, r24
    option2_1.prev = NULL;
 6ec:	10 92 45 01 	sts	0x0145, r1
 6f0:	10 92 44 01 	sts	0x0144, r1
    option2_1.child = NULL;
 6f4:	10 92 49 01 	sts	0x0149, r1
 6f8:	10 92 48 01 	sts	0x0148, r1
    option2_1.parent = &option2;
 6fc:	d0 92 4b 01 	sts	0x014B, r13
 700:	c0 92 4a 01 	sts	0x014A, r12
    option2.child = &option2_1; // link parent
 704:	10 93 bd 01 	sts	0x01BD, r17
 708:	00 93 bc 01 	sts	0x01BC, r16
    option2_1.actionForward = NULL;
 70c:	10 92 4d 01 	sts	0x014D, r1
 710:	10 92 4c 01 	sts	0x014C, r1
    option2_1.actionBackward = &moveToParent;
 714:	f0 92 4f 01 	sts	0x014F, r15
 718:	e0 92 4e 01 	sts	0x014E, r14

    // ================== option 2_2 ==================
    strcpy(option2_2.text,"Program 2_2");
 71c:	64 eb       	ldi	r22, 0xB4	; 180
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	0e 94 bb 04 	call	0x976	; 0x976 <strcpy>
    option2_2.next = NULL;
 724:	10 92 2a 01 	sts	0x012A, r1
 728:	10 92 29 01 	sts	0x0129, r1
    option2_2.prev = &option2_1;
 72c:	10 93 28 01 	sts	0x0128, r17
 730:	00 93 27 01 	sts	0x0127, r16
    option2_2.child = NULL;
 734:	10 92 2c 01 	sts	0x012C, r1
 738:	10 92 2b 01 	sts	0x012B, r1
    option2_2.parent = &option2;
 73c:	d0 92 2e 01 	sts	0x012E, r13
 740:	c0 92 2d 01 	sts	0x012D, r12
    option2_2.actionForward = &moveToChild;
 744:	90 92 30 01 	sts	0x0130, r9
 748:	80 92 2f 01 	sts	0x012F, r8
    option2_2.actionBackward = &moveToParent;
 74c:	f0 92 32 01 	sts	0x0132, r15
 750:	e0 92 31 01 	sts	0x0131, r14

	    // ================== option 3_1 ==================
    strcpy(option3_1.text,"Program 3_1");
 754:	09 ef       	ldi	r16, 0xF9	; 249
 756:	10 e0       	ldi	r17, 0x00	; 0
 758:	c8 01       	movw	r24, r16
 75a:	60 ec       	ldi	r22, 0xC0	; 192
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	0e 94 bb 04 	call	0x976	; 0x976 <strcpy>
    option3_1.next = &option3_2;
 762:	8c ed       	ldi	r24, 0xDC	; 220
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	90 93 0d 01 	sts	0x010D, r25
 76a:	80 93 0c 01 	sts	0x010C, r24
    option3_1.prev = NULL;
 76e:	10 92 0b 01 	sts	0x010B, r1
 772:	10 92 0a 01 	sts	0x010A, r1
    option3_1.child = NULL;
 776:	10 92 0f 01 	sts	0x010F, r1
 77a:	10 92 0e 01 	sts	0x010E, r1
    option3_1.parent = &option3;
 77e:	70 92 11 01 	sts	0x0111, r7
 782:	60 92 10 01 	sts	0x0110, r6
    option3.child = &option3_1; // link parent
 786:	10 93 a0 01 	sts	0x01A0, r17
 78a:	00 93 9f 01 	sts	0x019F, r16
    option3_1.actionForward = moveToChild;
 78e:	90 92 13 01 	sts	0x0113, r9
 792:	80 92 12 01 	sts	0x0112, r8
    option3_1.actionBackward = &moveToParent;
 796:	f0 92 15 01 	sts	0x0115, r15
 79a:	e0 92 14 01 	sts	0x0114, r14

		    // ================== option 3_2 ==================
    strcpy(option3_2.text,"Powrot do Menu1");
 79e:	6c ec       	ldi	r22, 0xCC	; 204
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	0e 94 bb 04 	call	0x976	; 0x976 <strcpy>
    option3_2.next = NULL;
 7a6:	10 92 f0 00 	sts	0x00F0, r1
 7aa:	10 92 ef 00 	sts	0x00EF, r1
    option3_2.prev = &option3_1;
 7ae:	10 93 ee 00 	sts	0x00EE, r17
 7b2:	00 93 ed 00 	sts	0x00ED, r16
    option3_2.child = &option1_1;
 7b6:	b0 92 f2 00 	sts	0x00F2, r11
 7ba:	a0 92 f1 00 	sts	0x00F1, r10
    option3_2.parent = &option3;
 7be:	70 92 f4 00 	sts	0x00F4, r7
 7c2:	60 92 f3 00 	sts	0x00F3, r6

    option3_2.actionForward = &moveToChild;
 7c6:	90 92 f6 00 	sts	0x00F6, r9
 7ca:	80 92 f5 00 	sts	0x00F5, r8
    option3_2.actionBackward = &moveToParent;
 7ce:	f0 92 f8 00 	sts	0x00F8, r15
 7d2:	e0 92 f7 00 	sts	0x00F7, r14
}
 7d6:	1f 91       	pop	r17
 7d8:	0f 91       	pop	r16
 7da:	ff 90       	pop	r15
 7dc:	ef 90       	pop	r14
 7de:	df 90       	pop	r13
 7e0:	cf 90       	pop	r12
 7e2:	bf 90       	pop	r11
 7e4:	af 90       	pop	r10
 7e6:	9f 90       	pop	r9
 7e8:	8f 90       	pop	r8
 7ea:	7f 90       	pop	r7
 7ec:	6f 90       	pop	r6
 7ee:	08 95       	ret

000007f0 <set_DDR>:
								9,10,11,12,
								13,14,15,16,
								0};

void set_DDR(char port_name){
	switch(port_name){
 7f0:	82 34       	cpi	r24, 0x42	; 66
 7f2:	79 f0       	breq	.+30     	; 0x812 <set_DDR+0x22>
 7f4:	83 34       	cpi	r24, 0x43	; 67
 7f6:	18 f4       	brcc	.+6      	; 0x7fe <set_DDR+0xe>
 7f8:	81 34       	cpi	r24, 0x41	; 65
 7fa:	c9 f4       	brne	.+50     	; 0x82e <set_DDR+0x3e>
 7fc:	05 c0       	rjmp	.+10     	; 0x808 <set_DDR+0x18>
 7fe:	83 34       	cpi	r24, 0x43	; 67
 800:	69 f0       	breq	.+26     	; 0x81c <set_DDR+0x2c>
 802:	84 34       	cpi	r24, 0x44	; 68
 804:	a1 f4       	brne	.+40     	; 0x82e <set_DDR+0x3e>
 806:	0f c0       	rjmp	.+30     	; 0x826 <set_DDR+0x36>
		case 'A':
		DDRA = 0xF0;
 808:	80 ef       	ldi	r24, 0xF0	; 240
 80a:	8a bb       	out	0x1a, r24	; 26
		PORTA=0x0F;
 80c:	8f e0       	ldi	r24, 0x0F	; 15
 80e:	8b bb       	out	0x1b, r24	; 27
 810:	08 95       	ret
		
		break;
		case 'B':
		DDRB = 0xF0;
 812:	80 ef       	ldi	r24, 0xF0	; 240
 814:	87 bb       	out	0x17, r24	; 23
		PORTB=0x0F;
 816:	8f e0       	ldi	r24, 0x0F	; 15
 818:	88 bb       	out	0x18, r24	; 24
 81a:	08 95       	ret
		
		break;
		case 'C':
		DDRC = 0xF0;
 81c:	80 ef       	ldi	r24, 0xF0	; 240
 81e:	84 bb       	out	0x14, r24	; 20
		PORTC=0x0F;
 820:	8f e0       	ldi	r24, 0x0F	; 15
 822:	85 bb       	out	0x15, r24	; 21
 824:	08 95       	ret
		
		break;
		
		case 'D':
		DDRD = 0xF0;
 826:	80 ef       	ldi	r24, 0xF0	; 240
 828:	81 bb       	out	0x11, r24	; 17
		PORTD=0x0F;
 82a:	8f e0       	ldi	r24, 0x0F	; 15
 82c:	82 bb       	out	0x12, r24	; 18
 82e:	08 95       	ret

00000830 <setPort>:
}//koniec getKey


void setPort(const char port_name, int8_t state)
{
	switch(port_name)
 830:	82 34       	cpi	r24, 0x42	; 66
 832:	61 f0       	breq	.+24     	; 0x84c <setPort+0x1c>
 834:	83 34       	cpi	r24, 0x43	; 67
 836:	18 f4       	brcc	.+6      	; 0x83e <setPort+0xe>
 838:	81 34       	cpi	r24, 0x41	; 65
 83a:	69 f4       	brne	.+26     	; 0x856 <setPort+0x26>
 83c:	05 c0       	rjmp	.+10     	; 0x848 <setPort+0x18>
 83e:	83 34       	cpi	r24, 0x43	; 67
 840:	39 f0       	breq	.+14     	; 0x850 <setPort+0x20>
 842:	84 34       	cpi	r24, 0x44	; 68
 844:	41 f4       	brne	.+16     	; 0x856 <setPort+0x26>
 846:	06 c0       	rjmp	.+12     	; 0x854 <setPort+0x24>
	{
		case 'A':
		PORTA = state;
 848:	6b bb       	out	0x1b, r22	; 27
 84a:	08 95       	ret
		break;
		case 'B':
		PORTB = state;
 84c:	68 bb       	out	0x18, r22	; 24
 84e:	08 95       	ret
		break;
		case 'C':
		PORTC = state;
 850:	65 bb       	out	0x15, r22	; 21
 852:	08 95       	ret
		break;
		case 'D':
		PORTD = state;
 854:	62 bb       	out	0x12, r22	; 18
 856:	08 95       	ret

00000858 <getPin>:
	
}
int8_t getPin(const char port_name)
{
	int8_t x=0xbF0;
	switch(port_name)
 858:	82 34       	cpi	r24, 0x42	; 66
 85a:	69 f0       	breq	.+26     	; 0x876 <__stack+0x17>
 85c:	83 34       	cpi	r24, 0x43	; 67
 85e:	18 f4       	brcc	.+6      	; 0x866 <__stack+0x7>
 860:	81 34       	cpi	r24, 0x41	; 65
 862:	29 f4       	brne	.+10     	; 0x86e <__stack+0xf>
 864:	06 c0       	rjmp	.+12     	; 0x872 <__stack+0x13>
 866:	83 34       	cpi	r24, 0x43	; 67
 868:	41 f0       	breq	.+16     	; 0x87a <__stack+0x1b>
 86a:	84 34       	cpi	r24, 0x44	; 68
 86c:	49 f0       	breq	.+18     	; 0x880 <__stack+0x21>
 86e:	80 ef       	ldi	r24, 0xF0	; 240
 870:	08 95       	ret
	{
		case 'A':
		x = 0x0F & PINA;
 872:	89 b3       	in	r24, 0x19	; 25
 874:	03 c0       	rjmp	.+6      	; 0x87c <__stack+0x1d>
		break;
		case 'B':
		x = 0x0F & PINB;
 876:	86 b3       	in	r24, 0x16	; 22
 878:	01 c0       	rjmp	.+2      	; 0x87c <__stack+0x1d>
		break;
		case 'C':
		x = 0x0F & PINC;
 87a:	83 b3       	in	r24, 0x13	; 19
 87c:	8f 70       	andi	r24, 0x0F	; 15
 87e:	08 95       	ret
		break;
		case 'D':
		x = 0x0F & PIND;
 880:	80 b3       	in	r24, 0x10	; 16
 882:	8f 70       	andi	r24, 0x0F	; 15
		break;
	}
	return x;
}
 884:	08 95       	ret

00000886 <translate>:



int8_t translate(int key_rcode){
		switch(key_rcode)
 886:	8b 30       	cpi	r24, 0x0B	; 11
 888:	91 05       	cpc	r25, r1
 88a:	81 f0       	breq	.+32     	; 0x8ac <translate+0x26>
 88c:	8c 30       	cpi	r24, 0x0C	; 12
 88e:	91 05       	cpc	r25, r1
 890:	1c f4       	brge	.+6      	; 0x898 <translate+0x12>
 892:	07 97       	sbiw	r24, 0x07	; 7
 894:	79 f4       	brne	.+30     	; 0x8b4 <translate+0x2e>
 896:	0c c0       	rjmp	.+24     	; 0x8b0 <translate+0x2a>
 898:	8d 30       	cpi	r24, 0x0D	; 13
 89a:	91 05       	cpc	r25, r1
 89c:	19 f0       	breq	.+6      	; 0x8a4 <translate+0x1e>
 89e:	0e 97       	sbiw	r24, 0x0e	; 14
 8a0:	49 f4       	brne	.+18     	; 0x8b4 <translate+0x2e>
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <translate+0x22>
 8a4:	82 e0       	ldi	r24, 0x02	; 2
 8a6:	08 95       	ret
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	08 95       	ret
 8ac:	83 e0       	ldi	r24, 0x03	; 3
 8ae:	08 95       	ret
		break;
		case 0b00001101:
			return 2;
			break;
		case 0b00001011:
			return 3;
 8b0:	84 e0       	ldi	r24, 0x04	; 4
 8b2:	08 95       	ret
			break;
		case 0b00000111:
			return 4;
 8b4:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			return 0;
				}
}
 8b6:	08 95       	ret

000008b8 <get_key>:
}



int8_t get_key(const char type, const char port_name) 
{
 8b8:	cf 92       	push	r12
 8ba:	df 92       	push	r13
 8bc:	ef 92       	push	r14
 8be:	ff 92       	push	r15
 8c0:	0f 93       	push	r16
 8c2:	1f 93       	push	r17
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	06 2f       	mov	r16, r22
	int8_t temp, row = 0,ret_key_index_number = 0, state,h_port,l_port;
	if(type == 'M' | type =='m'){
 8ca:	8d 34       	cpi	r24, 0x4D	; 77
 8cc:	11 f0       	breq	.+4      	; 0x8d2 <get_key+0x1a>
 8ce:	8d 36       	cpi	r24, 0x6D	; 109
 8d0:	91 f4       	brne	.+36     	; 0x8f6 <get_key+0x3e>
		state = ~(1<<4); //wstawiamy to zero krocz?ce, w zasadzie to w tym przypadku nie kroczace
		setPort(port_name, state);
 8d2:	80 2f       	mov	r24, r16
 8d4:	6f ee       	ldi	r22, 0xEF	; 239
 8d6:	0e 94 18 04 	call	0x830	; 0x830 <setPort>
 8da:	8a ef       	ldi	r24, 0xFA	; 250
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	01 97       	sbiw	r24, 0x01	; 1
 8e0:	f1 f7       	brne	.-4      	; 0x8de <get_key+0x26>
		_delay_ms(10);
		temp = getPin(port_name);
 8e2:	80 2f       	mov	r24, r16
 8e4:	0e 94 2c 04 	call	0x858	; 0x858 <getPin>

			return translate(temp);
 8e8:	99 27       	eor	r25, r25
 8ea:	87 fd       	sbrc	r24, 7
 8ec:	90 95       	com	r25
 8ee:	0e 94 43 04 	call	0x886	; 0x886 <translate>
 8f2:	18 2f       	mov	r17, r24
 8f4:	36 c0       	rjmp	.+108    	; 0x962 <get_key+0xaa>
		
	}
	
	if(type == 'D' | type =='d')
 8f6:	84 34       	cpi	r24, 0x44	; 68
 8f8:	21 f0       	breq	.+8      	; 0x902 <get_key+0x4a>
 8fa:	84 36       	cpi	r24, 0x64	; 100
 8fc:	11 f0       	breq	.+4      	; 0x902 <get_key+0x4a>
 8fe:	10 e0       	ldi	r17, 0x00	; 0
 900:	30 c0       	rjmp	.+96     	; 0x962 <get_key+0xaa>
 902:	10 e0       	ldi	r17, 0x00	; 0
 904:	c4 e0       	ldi	r28, 0x04	; 4
 906:	d0 e0       	ldi	r29, 0x00	; 0
		Tutaj w zasadzie idac za tym pomyslem az sie prosi to skumulowac do 4 bitow w ukladzie 0x_ _ _ _ W W K K i miec 4 bity wolne, ale to tylko dywagacja
					*/
			for(int col=4; col<8; col++) // column
			{
				state = ~(1<<col);
				setPort(port_name, state);
 908:	41 e0       	ldi	r20, 0x01	; 1
 90a:	c4 2e       	mov	r12, r20
 90c:	d1 2c       	mov	r13, r1
 90e:	3a ef       	ldi	r19, 0xFA	; 250
 910:	e3 2e       	mov	r14, r19
 912:	f1 2c       	mov	r15, r1
 914:	b6 01       	movw	r22, r12
 916:	0c 2e       	mov	r0, r28
 918:	02 c0       	rjmp	.+4      	; 0x91e <get_key+0x66>
 91a:	66 0f       	add	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	0a 94       	dec	r0
 920:	e2 f7       	brpl	.-8      	; 0x91a <get_key+0x62>
 922:	60 95       	com	r22
 924:	80 2f       	mov	r24, r16
 926:	0e 94 18 04 	call	0x830	; 0x830 <setPort>
 92a:	c7 01       	movw	r24, r14
 92c:	01 97       	sbiw	r24, 0x01	; 1
 92e:	f1 f7       	brne	.-4      	; 0x92c <get_key+0x74>
				_delay_ms(10);
				temp = getPin(port_name);
 930:	80 2f       	mov	r24, r16
 932:	0e 94 2c 04 	call	0x858	; 0x858 <getPin>
				row = translate(temp);
 936:	99 27       	eor	r25, r25
 938:	87 fd       	sbrc	r24, 7
 93a:	90 95       	com	r25
 93c:	0e 94 43 04 	call	0x886	; 0x886 <translate>
				if(row != 0)
 940:	88 23       	and	r24, r24
 942:	59 f0       	breq	.+22     	; 0x95a <get_key+0xa2>
					ret_key_index_number = (row-1)*4 + col - 3;
 944:	99 27       	eor	r25, r25
 946:	87 fd       	sbrc	r24, 7
 948:	90 95       	com	r25
 94a:	01 97       	sbiw	r24, 0x01	; 1
 94c:	88 0f       	add	r24, r24
 94e:	99 1f       	adc	r25, r25
 950:	88 0f       	add	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	18 2f       	mov	r17, r24
 956:	13 50       	subi	r17, 0x03	; 3
 958:	1c 0f       	add	r17, r28
		
		l_port = getPin(port_name) & 0x0F;
		h_port = getPin(port_name) &0xF0;
		Tutaj w zasadzie idac za tym pomyslem az sie prosi to skumulowac do 4 bitow w ukladzie 0x_ _ _ _ W W K K i miec 4 bity wolne, ale to tylko dywagacja
					*/
			for(int col=4; col<8; col++) // column
 95a:	21 96       	adiw	r28, 0x01	; 1
 95c:	c8 30       	cpi	r28, 0x08	; 8
 95e:	d1 05       	cpc	r29, r1
 960:	c9 f6       	brne	.-78     	; 0x914 <get_key+0x5c>
			return ret_key_index_number;
		
		
		
	
}//koniec getKey
 962:	81 2f       	mov	r24, r17
 964:	df 91       	pop	r29
 966:	cf 91       	pop	r28
 968:	1f 91       	pop	r17
 96a:	0f 91       	pop	r16
 96c:	ff 90       	pop	r15
 96e:	ef 90       	pop	r14
 970:	df 90       	pop	r13
 972:	cf 90       	pop	r12
 974:	08 95       	ret

00000976 <strcpy>:
 976:	fb 01       	movw	r30, r22
 978:	dc 01       	movw	r26, r24
 97a:	01 90       	ld	r0, Z+
 97c:	0d 92       	st	X+, r0
 97e:	00 20       	and	r0, r0
 980:	e1 f7       	brne	.-8      	; 0x97a <strcpy+0x4>
 982:	08 95       	ret

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
